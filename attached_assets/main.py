
import cv2
import os
import tempfile
import re
import string
import time
import asyncio
import numpy as np
from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from fpdf import FPDF
from PIL import Image
import yt_dlp
from skimage.metrics import structural_similarity as ssim
from threading import Semaphore
from concurrent.futures import ThreadPoolExecutor
import threading

# Your Telegram Bot Token
TELEGRAM_TOKEN = '7960013115:AAEocB5fZ6jxLZVIcWwMVd5bJd-oQNqdEfA'

# Channel ‡§ï‡•Ä settings
CHANNEL_USERNAME = '@alluserpdf'  # ‡§Ü‡§™‡§ï‡§æ channel username

# SSIM ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏
SSIM_THRESHOLD = 1  # ‡§∏‡§Æ‡§æ‡§®‡§§‡§æ ‡§ï‡§æ ‡§•‡•ç‡§∞‡•á‡§∂‡•ã‡§≤‡•ç‡§°
SSIM_RESIZE_DIM = (128, 72) # SSIM ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡•ç‡§∞‡•á‡§Æ ‡§ï‡§æ ‡§Ü‡§ï‡§æ‡§∞
FRAME_SKIP_FOR_SSIM_CHECK = 500 # ‡§π‡§∞ 3rd ‡§´‡•ç‡§∞‡•á‡§Æ ‡§™‡§∞ SSIM ‡§ú‡§æ‡§Ç‡§ö

# PDF ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏
PDF_FRAME_WIDTH_TARGET = 1280 # PDF ‡§Æ‡•á‡§Ç ‡§´‡•ç‡§∞‡•á‡§Æ ‡§ï‡•Ä ‡§ö‡•å‡§°‡§º‡§æ‡§à
WATERMARK_TEXT = "Created by @youpdf_bot"
MAX_PDF_PAGES = 5000 # PDF ‡§Æ‡•á‡§Ç ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§™‡•á‡§ú

# Multi-user processing ‡§ï‡•á ‡§≤‡§ø‡§è settings
MAX_CONCURRENT_USERS = 10
CHUNK_DURATION_MINUTES = 30  # 30 ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•á chunks
MAX_VIDEO_DURATION_HOURS = 1.5 # ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ 1.5 ‡§ò‡§Ç‡§ü‡•á

# Semaphore for limiting concurrent processing
processing_semaphore = Semaphore(MAX_CONCURRENT_USERS)
user_queue = []
processing_users = {}  # Changed to dict to store user processing info

def get_video_id(url):
    """YouTube URL ‡§∏‡•á video ID extract ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
    video_id_match = re.search(r"(?:v=|\/)([0-9A-Za-z_-]{11})", url)
    if video_id_match:
        return video_id_match.group(1)
    return None

def sanitize_filename(title):
    """File name ‡§ï‡•ã safe ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à"""
    return ''.join(c for c in title if c in (string.ascii_letters + string.digits + ' -_')).rstrip()

def format_duration(seconds):
    """Duration ‡§ï‡•ã proper format ‡§Æ‡•á‡§Ç convert ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
    if seconds < 60:
        return f"{int(seconds)}s"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        secs = int(seconds % 60)
        return f"{minutes}m {secs}s"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours}h {minutes}m"

def get_video_duration(video_id):
    """Video ‡§ï‡•Ä duration ‡§®‡§ø‡§ï‡§æ‡§≤‡§§‡§æ ‡§π‡•à"""
    video_url = f"https://www.youtube.com/watch?v={video_id}"
    ydl_opts = {
        'quiet': True,
        'no_warnings': True,
        'cookiefile': 'cookies.txt',
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            info_dict = ydl.extract_info(video_url, download=False)
            duration = info_dict.get('duration', 0)  # seconds ‡§Æ‡•á‡§Ç
            return duration
        except:
            return 0

def download_video(video_id, progress_callback=None):
    """YouTube video download ‡§ï‡§∞‡§§‡§æ ‡§π‡•à with better control"""
    video_url = f"https://www.youtube.com/watch?v={video_id}"
    output_file = f"video_{video_id}.mp4"
    
    # Clean console output
    def progress_hook(d):
        if progress_callback and d['status'] == 'downloading':
            try:
                percent = d.get('_percent_str', 'N/A').strip()
                speed = d.get('_speed_str', 'N/A').strip()
                if progress_callback:
                    progress_callback(percent, speed)
            except:
                pass
    
    ydl_opts = {
        'format': 'best[height<=720]/best',
        'outtmpl': output_file,
        'noplaylist': True,
        'quiet': True,
        'no_warnings': True,
        'progress_hooks': [progress_hook],
        'retries': 5,
        'fragment_retries': 5,
        'extractaudio': False,
        'keepvideo': True,
        'cookiefile': 'cookies.txt',
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(video_url, download=True)
            title = info_dict.get('title', 'Unknown Title')
            duration = info_dict.get('duration', 0)
            
            if not os.path.exists(output_file):
                raise Exception("Video file download failed")
                
            return title, output_file, duration
            
    except Exception as e:
        if os.path.exists(output_file):
            try:
                os.remove(output_file)
            except:
                pass
        raise Exception(f"Download failed: {str(e)}")

def extract_unique_frames_for_chunk(video_file, output_folder, start_time, end_time, chunk_num, n=3, ssim_threshold=0.8):
    """Video ‡§ï‡•á specific chunk ‡§∏‡•á unique frames extract ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
    cap = cv2.VideoCapture(video_file)
    fps = int(cap.get(cv2.CAP_PROP_FPS))
    
    start_frame = int(start_time * fps)
    end_frame = int(end_time * fps)
    
    cap.set(cv2.CAP_PROP_POS_FRAMES, start_frame)
    
    last_frame = None
    saved_frame = None
    frame_number = start_frame
    last_saved_frame_number = -1
    timestamps = []

    while frame_number < end_frame and cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        if (frame_number - start_frame) % n == 0:
            frame = cv2.resize(frame, (640, 360), interpolation=cv2.INTER_CUBIC)
            gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            gray_frame = cv2.resize(gray_frame, (128, 72))

            if last_frame is not None:
                try:
                    data_range = gray_frame.max() - gray_frame.min()
                    if data_range > 0:
                        similarity = ssim(gray_frame, last_frame, data_range=data_range)
                    else:
                        similarity = 1.0
                except Exception as e:
                    similarity = 0.0

                if similarity < ssim_threshold:
                    if saved_frame is not None and frame_number - last_saved_frame_number > fps:
                        frame_path = os.path.join(output_folder, f'chunk{chunk_num}_frame{frame_number:04d}_{frame_number // fps}.png')
                        cv2.imwrite(frame_path, saved_frame, [int(cv2.IMWRITE_PNG_COMPRESSION), 3])
                        timestamps.append((frame_number, frame_number // fps))

                    saved_frame = frame
                    last_saved_frame_number = frame_number
                else:
                    saved_frame = frame
            else:
                frame_path = os.path.join(output_folder, f'chunk{chunk_num}_frame{frame_number:04d}_{frame_number // fps}.png')
                cv2.imwrite(frame_path, frame, [int(cv2.IMWRITE_PNG_COMPRESSION), 3])
                timestamps.append((frame_number, frame_number // fps))
                last_saved_frame_number = frame_number

            last_frame = gray_frame

        frame_number += 1

    cap.release()
    return timestamps

def convert_frames_to_pdf_chunk(input_folder, output_file, timestamps, chunk_num):
    """Specific chunk ‡§ï‡•á frames ‡§ï‡•ã PDF ‡§Æ‡•á‡§Ç convert ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
    frame_files = [f for f in os.listdir(input_folder) if f.startswith(f'chunk{chunk_num}_')]
    frame_files = sorted(frame_files, key=lambda x: int(x.split('_')[1].split('frame')[-1]))
    
    pdf = FPDF("L")
    pdf.set_auto_page_break(0)

    total_pages = 0

    for i, (frame_file, (frame_number, timestamp_seconds)) in enumerate(zip(frame_files, timestamps)):
        frame_path = os.path.join(input_folder, frame_file)
        if not os.path.exists(frame_path):
            continue
            
        image = Image.open(frame_path)

        pdf.add_page()
        total_pages += 1

        width, height = image.size
        pdf_width = pdf.w
        pdf_height = pdf.h

        aspect_ratio = width / height
        new_width = pdf_width
        new_height = pdf_width / aspect_ratio

        if new_height > pdf_height:
            new_height = pdf_height
            new_width = pdf_height * aspect_ratio

        x = (pdf_width - new_width) / 2
        y = (pdf_height - new_height) / 2

        pdf.image(frame_path, x=x, y=y, w=new_width, h=new_height)

        timestamp = f"{timestamp_seconds // 3600:02d}:{(timestamp_seconds % 3600) // 60:02d}:{timestamp_seconds % 60:02d}"
        watermark_text = "Created by @youpdf_bot"
        combined_text = f"{timestamp} - {watermark_text}"

        pdf.set_xy(5, 5)
        pdf.set_font("Arial", size=18)
        pdf.cell(0, 0, combined_text)

    if total_pages > 0:
        pdf.output(output_file)
    return total_pages

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start command handler"""
    user_name = update.effective_user.first_name
    user_id = update.effective_user.id
    username = update.effective_user.username or "No username"

    welcome_message = f"""
üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á {user_name}!

üé¨ YouTube to PDF Bot ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!

üìã ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à:
1. YouTube video ‡§ï‡§æ link ‡§≠‡•á‡§ú‡•á‡§Ç 
2. Bot video ‡§ï‡•ã 30-30 ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•á ‡§≠‡§æ‡§ó‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§Ç‡§ü‡•á‡§ó‡§æ
3. ‡§π‡§∞ ‡§≠‡§æ‡§ó ‡§ï‡•Ä PDF ‡§¨‡§®‡§ï‡§∞ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§≠‡•á‡§ú‡•Ä ‡§ú‡§æ‡§è‡§ó‡•Ä
4. ‡§è‡§ï ‡§∏‡§æ‡§• 10 users ‡§ï‡•Ä videos process ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡§Ç


üö® Bot ‡§ï‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•á ‡§Ö‡§≤‡§æ‡§µ‡§æ ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§® ‡§ï‡§∞‡•á‡§Ç 
‡§Ø‡§π ‡§Æ‡•à‡§∏‡•á‡§ú Owner ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§ú‡§æ‡§§‡§æ ‡§π‡•à
üìû Contact Owner - @LODHIJI27

‡§¨‡§∏ YouTube link ‡§≠‡•á‡§ú‡§ø‡§è! üöÄ

‚ö†Ô∏è ‡§®‡•ã‡§ü: ‡§ï‡•á‡§µ‡§≤ 1.5 ‡§ò‡§Ç‡§ü‡•á ‡§§‡§ï ‡§ï‡•Ä videos ‡§π‡•Ä process ‡§π‡•ã‡§Ç‡§ó‡•Ä
    """

    await update.message.reply_text(welcome_message)

    # Forward original message to channel
    try:
        await update.message.forward(chat_id=CHANNEL_USERNAME)
        
        # Additional info message for channel
        channel_message = f"""
üÜï ‡§®‡§Ø‡§æ User Bot ‡§ï‡•ã Start ‡§ï‡§ø‡§Ø‡§æ!

üë§ Name: {user_name}
üÜî User ID: {user_id}
üìù Username: @{username}
‚è∞ Time: {time.strftime('%Y-%m-%d %H:%M:%S')}
        """
        await context.bot.send_message(chat_id=CHANNEL_USERNAME, text=channel_message)
    except Exception as e:
        print(f"Channel message send error: {e}")

async def process_video_chunks(update, context, video_id, title, video_path, user_name, user_id, username, url, duration_seconds):
    """Video ‡§ï‡•ã chunks ‡§Æ‡•á‡§Ç process ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§π‡§∞ chunk ‡§ï‡•Ä PDF instantly ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à"""
    messages_to_delete = []  # Track messages to delete
    start_time = time.time()
    
    try:
        chunk_duration_seconds = CHUNK_DURATION_MINUTES * 60
        total_chunks = int(np.ceil(duration_seconds / chunk_duration_seconds))
        
        analysis_msg = await update.message.reply_text(
            f"üìä Video Analysis:\n"
            f"üé¨ Title: {title}\n"
            f"‚è±Ô∏è ‡§ï‡•Å‡§≤ ‡§∏‡§Æ‡§Ø: {format_duration(duration_seconds)}\n"
            f"üì¶ ‡§ï‡•Å‡§≤ ‡§≠‡§æ‡§ó: {total_chunks}\n\n"
            f"üîÑ Processing ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à..."
        )
        
        # Forward analysis to channel
        try:
            await analysis_msg.forward(chat_id=CHANNEL_USERNAME)
        except:
            pass

        total_pages_all = 0

        with tempfile.TemporaryDirectory() as temp_folder:
            for chunk_num in range(total_chunks):
                start_time_chunk = chunk_num * chunk_duration_seconds
                end_time_chunk = min((chunk_num + 1) * chunk_duration_seconds, duration_seconds)
                
                chunk_start_min = int(start_time_chunk // 60)
                chunk_end_min = int(end_time_chunk // 60)
                
                # Better progress message
                processing_msg = await update.message.reply_text(
                    f"üîÑ Processing Part {chunk_num + 1}/{total_chunks}\n"
                    f"üìç Video portion: {format_duration(start_time_chunk)} - {format_duration(end_time_chunk)}\n"
                    f"‚öôÔ∏è Extracting frames..."
                )
                messages_to_delete.append(processing_msg)
                
                # Forward processing update to channel
                try:
                    await processing_msg.forward(chat_id=CHANNEL_USERNAME)
                except:
                    pass
                
                # Frames extract ‡§ï‡§∞‡§®‡§æ
                timestamps = extract_unique_frames_for_chunk(
                    video_path, temp_folder, start_time_chunk, end_time_chunk, chunk_num
                )
                
                if not timestamps:
                    await processing_msg.edit_text(
                        f"‚ö†Ô∏è Part {chunk_num + 1} ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à unique frames ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á"
                    )
                    continue
                
                # Update progress
                await processing_msg.edit_text(
                    f"üîÑ Processing Part {chunk_num + 1}/{total_chunks}\n"
                    f"üìç Video portion: {format_duration(start_time_chunk)} - {format_duration(end_time_chunk)}\n"
                    f"üìÑ Creating PDF with {len(timestamps)} pages..."
                )
                
                # PDF ‡§¨‡§®‡§æ‡§®‡§æ
                pdf_file_name = f"{sanitize_filename(title)}_Part_{chunk_num + 1}.pdf"
                total_pages = convert_frames_to_pdf_chunk(temp_folder, pdf_file_name, timestamps, chunk_num)
                
                if total_pages > 0:
                    total_pages_all += total_pages
                    
                    # Update progress
                    await processing_msg.edit_text(
                        f"üì§ Sending Part {chunk_num + 1}/{total_chunks}\n"
                        f"üìç Video portion: {format_duration(start_time_chunk)} - {format_duration(end_time_chunk)}\n"
                        f"üìÑ Pages: {total_pages}"
                    )
                    
                    # Send to channel first
                    try:
                        with open(pdf_file_name, 'rb') as pdf_file:
                            channel_caption = f"""
üìÑ PDF Part {chunk_num + 1}/{total_chunks} Ready!

üë§ User: {user_name} (@{username})
üÜî User ID: {user_id}
üé¨ Title: {title}
üìç Time: {format_duration(start_time_chunk)} - {format_duration(end_time_chunk)}
üìÑ Pages: {total_pages}
‚è∞ Generated: {time.strftime('%Y-%m-%d %H:%M:%S')}
                            """
                            await context.bot.send_document(
                                chat_id=CHANNEL_USERNAME,
                                document=pdf_file,
                                caption=channel_caption,
                                read_timeout=600,
                                write_timeout=600
                            )
                    except Exception as e:
                        print(f"Channel PDF send error: {e}")
                    
                    # Send to user with multiple retry attempts
                    max_retries = 5
                    retry_count = 0
                    sent_successfully = False
                    
                    while retry_count < max_retries and not sent_successfully:
                        try:
                            with open(pdf_file_name, 'rb') as pdf_file:
                                user_caption = f"""
‚úÖ Part {chunk_num + 1}/{total_chunks} Ready!
üé¨ {title}
üìç {format_duration(start_time_chunk)} - {format_duration(end_time_chunk)}
üìÑ Pages: {total_pages}
                                """
                                await update.message.reply_document(
                                    pdf_file,
                                    caption=user_caption,
                                    read_timeout=600,
                                    write_timeout=600
                                )
                                sent_successfully = True
                                
                        except Exception as e:
                            retry_count += 1
                            if "Request Entity Too Large" in str(e):
                                print(f"File too large, retrying in 5 seconds... (Attempt {retry_count}/{max_retries})")
                                await asyncio.sleep(5)
                            else:
                                print(f"Send error (Attempt {retry_count}/{max_retries}): {e}")
                                await asyncio.sleep(2)
                    
                    if sent_successfully:
                        # Delete the processing message after successful send
                        try:
                            await processing_msg.delete()
                            messages_to_delete.remove(processing_msg)
                        except:
                            pass
                    else:
                        await processing_msg.edit_text(f"‚ùå Part {chunk_num + 1} send ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡§à ‡§¨‡§æ‡§∞ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§≠‡•Ä error ‡§Ü‡§Ø‡§æ")
                    
                    # File cleanup
                    try:
                        os.remove(pdf_file_name)
                    except:
                        pass
                else:
                    await processing_msg.edit_text(f"‚ö†Ô∏è Part {chunk_num + 1} ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à valid frames ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á")
        
        # Calculate total processing time
        total_time = time.time() - start_time
        
        # Final completion message
        completion_msg = await update.message.reply_text(
            f"""
üéâ Complete! PDF successfully ‡§≠‡•á‡§ú‡•Ä ‡§ó‡§à!

Bot ‡§ï‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•á ‡§Ö‡§≤‡§æ‡§µ‡§æ ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§® ‡§ï‡§∞‡•á‡§Ç 
‡§Ø‡§π ‡§Æ‡•à‡§∏‡•á‡§ú Owner ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§ú‡§æ‡§§‡§æ ‡§π‡•à
Contact Owner - @LODHIJI27

üìÑ Total Pages: {total_pages_all}
‚è±Ô∏è ‡§∏‡§Æ‡§Ø: {format_duration(total_time)}
            """
        )
        
        # Forward completion to channel
        try:
            await completion_msg.forward(chat_id=CHANNEL_USERNAME)
        except:
            pass
        
        # Clean up any remaining processing messages
        for msg in messages_to_delete:
            try:
                await msg.delete()
            except:
                pass
        
    except Exception as e:
        error_msg = f"‚ùå Processing Error: {str(e)}"
        await update.message.reply_text(error_msg)
        
        # Forward error to channel
        try:
            await context.bot.send_message(chat_id=CHANNEL_USERNAME, text=f"Error for user {user_name}: {error_msg}")
        except:
            pass
    finally:
        # User ‡§ï‡•ã processing list ‡§∏‡•á ‡§π‡§ü‡§æ‡§®‡§æ
        if user_id in processing_users:
            del processing_users[user_id]
        
        # Video file cleanup
        try:
            if 'video_path' in locals() and os.path.exists(video_path):
                os.remove(video_path)
        except:
            pass
        
        # Clean up any leftover video files
        try:
            import glob
            for file_pattern in ['video_*.mp4', 'video_*.mp4.part', 'video_*.mp4.ytdl']:
                for file in glob.glob(file_pattern):
                    try:
                        os.remove(file)
                    except:
                        pass
        except:
            pass

async def download_and_convert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Main function ‡§ú‡•ã YouTube URL handle ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    username = update.effective_user.username or "No username"
    url = update.message.text

    # Forward user message to channel
    try:
        await update.message.forward(chat_id=CHANNEL_USERNAME)
        
        user_message_info = f"""
üì® New Video Request:

üë§ Name: {user_name}
üÜî User ID: {user_id}
üìù Username: @{username}
üí¨ Link: {url}
‚è∞ Time: {time.strftime('%Y-%m-%d %H:%M:%S')}
        """
        await context.bot.send_message(chat_id=CHANNEL_USERNAME, text=user_message_info)
    except Exception as e:
        print(f"Channel message send error: {e}")

    # Check if user is already processing
    if user_id in processing_users:
        await update.message.reply_text(
            f"‚ö†Ô∏è {user_name} ‡§ú‡•Ä, ‡§Ü‡§™‡§ï‡•Ä ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§è‡§ï video process ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à!\n"
            f"‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏‡§ï‡•á complete ‡§π‡•ã‡§®‡•á ‡§ï‡§æ wait ‡§ï‡§∞‡•á‡§Ç‡•§ üôè"
        )
        return

    # Check processing capacity and add to queue if needed
    if len(processing_users) >= MAX_CONCURRENT_USERS:
        queue_position = len(user_queue) + 1
        user_queue.append({
            'user_id': user_id,
            'update': update,
            'context': context,
            'url': url,
            'user_name': user_name,
            'username': username
        })
        
        queue_msg = await update.message.reply_text(
            f"‚è≥ {user_name} ‡§ú‡•Ä, ‡§Ü‡§™‡§ï‡•Ä video processing line ‡§Æ‡•á‡§Ç ‡§≤‡§ó‡•Ä ‡§π‡•à!\n\n"
            f"üìç ‡§Ü‡§™‡§ï‡§æ ‡§®‡§Ç‡§¨‡§∞: {queue_position}\n"
            f"üîÑ Currently {len(processing_users)} users ‡§ï‡•Ä videos process ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç\n\n"
            f"‡§ï‡•É‡§™‡§Ø‡§æ ‡§•‡•ã‡§°‡§º‡§æ wait ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§π‡•Ä ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§∞‡•Ä ‡§Ü‡§è‡§ó‡•Ä! üôè"
        )
        
        # Forward queue message to channel
        try:
            await queue_msg.forward(chat_id=CHANNEL_USERNAME)
        except:
            pass
        return

    video_id = get_video_id(url)
    if not video_id:
        error_msg = await update.message.reply_text("‚ùå Invalid YouTube URL! ‡§ï‡•É‡§™‡§Ø‡§æ valid YouTube link ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")
        try:
            await error_msg.forward(chat_id=CHANNEL_USERNAME)
        except:
            pass
        return

    # User ‡§ï‡•ã processing ‡§Æ‡•á‡§Ç add ‡§ï‡§∞‡§®‡§æ
    processing_users[user_id] = {
        'user_name': user_name,
        'username': username,
        'start_time': time.time()
    }
    
    download_msg = None
    
    try:
        # Storage check ‡§ï‡§∞‡§®‡§æ ‡§™‡§π‡§≤‡•á
        import shutil
        free_space_gb = shutil.disk_usage('.').free / (1024**3)
        if free_space_gb < 2:  # 2GB ‡§∏‡•á ‡§ï‡§Æ space ‡§π‡•à ‡§§‡•ã warning
            await update.message.reply_text(
                f"‚ö†Ô∏è Storage ‡§ï‡§Æ ‡§π‡•à ({free_space_gb:.1f}GB free)!\n"
                f"‡§ï‡•Å‡§õ ‡§∏‡§Æ‡§Ø ‡§¨‡§æ‡§¶ try ‡§ï‡§∞‡•á‡§Ç‡•§"
            )
            return
        
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        
        # Video info check ‡§ï‡§∞‡§®‡§æ ‡§™‡§π‡§≤‡•á
        info_msg = await update.message.reply_text("üîç Video information ‡§®‡§ø‡§ï‡§æ‡§≤‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à...")
        
        try:
            duration_seconds = get_video_duration(video_id)
            if duration_seconds == 0:
                await info_msg.edit_text("‚ùå Video information ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ valid URL check ‡§ï‡§∞‡•á‡§Ç‡•§")
                return
                
            if duration_seconds > MAX_VIDEO_DURATION_HOURS * 3600:
                await info_msg.edit_text(
                    f"‚ùå Video ‡§¨‡§π‡•Å‡§§ ‡§≤‡§Ç‡§¨‡•Ä ‡§π‡•à ({format_duration(duration_seconds)})!\n"
                    f"‡§ï‡•É‡§™‡§Ø‡§æ {MAX_VIDEO_DURATION_HOURS} ‡§ò‡§Ç‡§ü‡•á ‡§∏‡•á ‡§ï‡§Æ ‡§ï‡•Ä video ‡§≠‡•á‡§ú‡•á‡§Ç‡•§"
                )
                return
                
            await info_msg.edit_text(
                f"‚úÖ Video ‡§Æ‡§ø‡§≤‡•Ä! ({format_duration(duration_seconds)})\n"
                f"üì• Download ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à..."
            )
            
        except Exception as e:
            await info_msg.edit_text(f"‚ùå Video info error: {str(e)}")
            return
        
        # Progress tracking ‡§ï‡•á ‡§≤‡§ø‡§è
        download_msg = info_msg
        last_update_time = time.time()
        
        def progress_callback(percent, speed):
            nonlocal last_update_time
            current_time = time.time()
            # ‡§π‡§∞ 2 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç update ‡§ï‡§∞‡§®‡§æ
            if current_time - last_update_time > 2:
                try:
                    asyncio.create_task(
                        download_msg.edit_text(
                            f"üì• Download Progress: {percent}\n"
                            f"‚ö° Speed: {speed}\n"
                            f"üîÑ Processing will start after download..."
                        )
                    )
                    last_update_time = current_time
                except:
                    pass
        
        # Video download ‡§ï‡§∞‡§®‡§æ
        try:
            title, video_path, actual_duration = download_video(video_id, progress_callback)
            await download_msg.edit_text(f"‚úÖ '{title}' download complete!\nüîÑ Processing ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...")
            
            # File size check
            if os.path.exists(video_path):
                file_size = os.path.getsize(video_path) / (1024 * 1024)  # MB ‡§Æ‡•á‡§Ç
                if file_size < 1:  # 1MB ‡§∏‡•á ‡§ï‡§Æ
                    await download_msg.edit_text("‚ùå Download incomplete ‡§Ø‡§æ corrupt file!")
                    return
                    
        except Exception as download_error:
            await download_msg.edit_text(f"‚ùå Download failed: {str(download_error)}")
            return
        
        # Delete download progress message
        try:
            await download_msg.delete()
        except:
            pass
        
        # Video ‡§ï‡•ã chunks ‡§Æ‡•á‡§Ç process ‡§ï‡§∞‡§®‡§æ
        await process_video_chunks(update, context, video_id, title, video_path, user_name, user_id, username, url, duration_seconds)
        
    except Exception as e:
        error_msg = f"‚ùå Error: {str(e)}"
        await update.message.reply_text(error_msg)
        
        # Forward error to channel
        try:
            await context.bot.send_message(chat_id=CHANNEL_USERNAME, text=f"Error for user {user_name}: {error_msg}")
        except:
            pass
    finally:
        # User ‡§ï‡•ã processing list ‡§∏‡•á ‡§π‡§ü‡§æ‡§®‡§æ
        if user_id in processing_users:
            del processing_users[user_id]
    
    # Queue ‡§∏‡•á ‡§Ö‡§ó‡§≤‡§æ user process ‡§ï‡§∞‡§®‡§æ
    await process_next_in_queue(context)

async def process_next_in_queue(context):
    """Queue ‡§∏‡•á ‡§Ö‡§ó‡§≤‡•á user ‡§ï‡•ã process ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
    if user_queue and len(processing_users) < MAX_CONCURRENT_USERS:
        next_user = user_queue.pop(0)
        
        # Notify user their turn has come
        try:
            turn_msg = await next_user['update'].message.reply_text(
                f"üéâ {next_user['user_name']} ‡§ú‡•Ä, ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§∞‡•Ä ‡§Ü ‡§ó‡§à ‡§π‡•à!\n"
                f"üîÑ ‡§Ü‡§™‡§ï‡•Ä video processing ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à..."
            )
            
            # Forward turn message to channel
            try:
                await turn_msg.forward(chat_id=CHANNEL_USERNAME)
            except:
                pass
            
            # Process their video
            await download_and_convert(next_user['update'], next_user['context'])
        except Exception as e:
            print(f"Error processing queued user: {e}")

def main():
    """Main function"""
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, download_and_convert))
    
    print("ü§ñ Bot is running...")
    print(f"üìä Max concurrent users: {MAX_CONCURRENT_USERS}")
    print(f"üì¶ Chunk duration: {CHUNK_DURATION_MINUTES} minutes")
    print(f"‚è∞ Max video duration: {MAX_VIDEO_DURATION_HOURS} hours")
    
    application.run_polling()

if __name__ == "__main__":
    main()
